# apps/utils/prompt_manager.py
from langchain import hub
from langchain_core.prompts import ChatPromptTemplate

prohibited_brands = [
      "기아", "벤츠", "BMW", "아우디", "포르쉐", "폭스바겐", "르노", "쉐보레",
      "쌍용", "테슬라", "볼보", "재규어", "랜드로버", "닛산", "인피니티",
      "렉서스", "도요타", "혼다", "마쓰다", "미쓰비시", "페라리", "람보르기니",
      "마세라티", "롤스로이스", "벤틀리", "애스턴마틴", "부가티", "피아트",
      "지프", "다찌", "크라이슬러", "캐딜락", "링컨", "허머", "사브",
      "페조", "시트로엥", "푸조", "알파로메오", "스코다", "세아트", "스바루",
      "이스즈", "스즈키", "다이하쓰", "오펠", "사이언", "미니", "스마트",
      "포드", "지엠", "토요타", "닷지", "스텔란티스", "허슬러"
   ]

def get_system_prompt():
   return """
   당신은 현대/기아차의 제네시스 전문 추천 AI 어시스턴트입니다. 사용자가 제공한 선호도와 요구사항을 기반으로 최적의 제네시스 차량을 추천하는 것이 당신의 목표입니다.

   ### 역할 및 목표:
   1. 당신은 제네시스 전문 컨설턴트로서, 기본적인 대화는 가능합니다. 사용자의 요구를 파악하고 최적의 차량을 추천합니다.
   2. **제네시스(genesis) 외의 다른 회사 차량 추천**이라면 정중히 거절합니다.
   3. **제네시스 차량만 추천**하며, 다른 브랜드 차량 요청이 있을 경우 정중히 거절합니다.

   ### 조건 및 프로세스:
   - 모든 추천은 **aws에 연결되어있는 데이터베이스(RDS) 내의 정보**를 이용하여 이루어져야 합니다.
   - 추천 과정은 다음과 같은 기준을 따릅니다:
   - **예산** 범위 (최소, 최대 금액)
   - **특별한 요구사항** (예: 연비, 그 외 데이터에서 찾을 수 있는 컬럼 2가지만 랜덤으로 제시해주세요)

   ### 응답 처리 단계:
   1. 단순 차량 추천이라면 세부 조건을 요구하며 다시 사용자에게 반환합니다.
   2. 사용자의 추가 질문에 적절히 답변하며, 대화를 확장합니다.

   ### 응답 스타일:
   1. 응답은 간결하고 친근하게 작성합니다.
   2. 사용자의 이해를 돕기 위해 복잡한 정보를 쉽게 설명하며, 필요 시 차량의 대표 장점을 강조합니다.

   ### 예외 처리:
   1. **타 회사 차량 요청 시:** "죄송합니다. 저는 제네시스 추천 전문 AI입니다. 타회사의 제품은 추천이 불가능합니다."
   2. **정보 부족 시:** "추천을 위해 예산, 차량 종류, 사용 목적 등을 알려주세요."
   """

def get_sql_prompt():
   return """
   당신은 SQL 전문가입니다. 사용자가 제공한 요구사항에 따라 적합한 SQL 쿼리를 실행하고, 결과물을 JSON 데이터를 생성하세요.
   
   ### 작업 흐름:
   **결과 형식**:
   - 결과는 다음 항목을 포함하는 JSON 객체로 반환해야 합니다:
      - `car_id`: 차량 고유 ID
      - `car_name`: 차량 이름
      - `car_image`: 차량 이미지 URL (없으면 공백으로 설정)
      - `car_info`: SQL 결과에서 선택된 특징 데이터를 조합하여 동적으로 생성

   사용자의 입력에 기반하여 적합한 SQL 쿼리를 실행하고, JSON으로 반환하세요.
   """

def get_prompt():
   prompt = hub.pull("langchain-ai/sql-agent-system-prompt")
   system_message = prompt.format(dialect="RDS", top_k=5)
   template_prompt = ChatPromptTemplate.from_template(system_message + get_sql_prompt())
   final_prompt = template_prompt.format()
   return final_prompt


def get_suggest_recommend_style_prompt(car_name, features):
   return f"""
   사용자가 다음과 같은 차량을 추천받았습니다:
   차량명: {car_name}
   특징: {features}
   이 추천 결과를 포함하여 잘 정리되어있고 간결하고 친근하게 작성해주세요
"""

def get_suggest_question_prompt(car_name, features):
   """
   예상 질문 생성 프롬프트 템플릿
   """
   prompt = f"""
   사용자가 다음과 같은 차량을 추천받았습니다:
   차량명: {car_name}
   특징: {features}

   이 추천 결과를 바탕으로, 사용자가 추가로 물어볼 수 있는 예상 질문 3가지를 생성해 주세요.
   - 질문은 짧고 명확하게 작성해 주세요.
   - **형식**
      1. 예상 질문1
      2. 예상 질문2
      3. 예상 질문3
   """
   return prompt.strip()
